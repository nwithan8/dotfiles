DOT_FOLDER="$REPO_LOCATION/dot"
SECRET_FOLDER="$DOT_FOLDER/secret"
OPEN_FOLDER="$DOT_FOLDER/open"

# Symlink files to their appropriate locations
# Using symlinks instead of copying files allows for updates to this repo to be reflected on the user's system immediately

do_backup_file() {
  DEST_FILE=$1
  BACKUP_SUFFIX="old"

  # Backup existing file if it exists
  if [ -f "$DEST_FILE" ]; then
    echo "Backing up $DEST_FILE to $DEST_FILE.$BACKUP_SUFFIX"
    mv "$DEST_FILE" "$DEST_FILE.$BACKUP_SUFFIX" || true # Potentially overwrite existing backup
  fi
}

do_remove_symlink() {
  DEST_FILE=$1

  # Remove symlink if it exists
  if [ -L "$DEST_FILE" ]; then
    echo "Removing symlink $DEST_FILE"
    rm "$DEST_FILE" || true
  fi
}

do_symlink_file() {
  SRC_FILE=$1
  DEST_FILE=$2

  # Verify SRC_FILE exists, skip if it doesn't
  if [ ! -f "$SRC_FILE" ]; then
    echo "Error: $SRC_FILE does not exist"
    return 1
  fi

  DEST_FOLDER=$(dirname "$DEST_FILE")
  mkdir -p "$DEST_FOLDER" || true

  # Remove symlink if it exists
  do_remove_symlink "$DEST_FILE"

  # Symlink file
  echo "Symlinking $SRC_FILE to $DEST_FILE"
  ln -s "$SRC_FILE" "$DEST_FILE" || true
}

do_symlink_folder() {
  SRC_FOLDER=$1
  DEST_FOLDER=$2

  # Create destination folder if it doesn't exist
  mkdir -p "$DEST_FOLDER" || true

  # Remove symlink if it exists
  do_remove_symlink "$DEST_FOLDER"

  # Symlink folder
  echo "Symlinking $SRC_FOLDER to $DEST_FOLDER"
  ln -s "$SRC_FOLDER" "$DEST_FOLDER" || true
}

do_symlink_folder_files_matching_pattern() {
  SRC_FOLDER=$1
  DEST_FOLDER=$2
  PATTERN=$3

  # Symlink files in folder
  for file in "$SRC_FOLDER"/$PATTERN; do
    FILE_NAME=$(basename "$file")
    DEST_FILE="$DEST_FOLDER/$FILE_NAME"
    do_symlink_file "$file" "$DEST_FILE"
  done
}

do_symlink_folder_files() {
  do_symlink_folder_files_matching_pattern "$1" "$2" "*"
  do_symlink_folder_files_matching_pattern "$1" "$2" ".*"
}

do_symlink_folder_folders_matching_pattern() {
  SRC_FOLDER=$1
  DEST_FOLDER=$2
  PATTERN=$3

  # Symlink folders in folder
  for folder in "$SRC_FOLDER"/$PATTERN; do
    if [ -d "$folder" ]; then
      echo "Found folder: $folder"
      DEST_FOLDER_PATH="$DEST_FOLDER"
      do_symlink_folder "$folder" "$DEST_FOLDER_PATH"
    fi
  done
}

do_symlink_folder_folders() {
  do_symlink_folder_folders_matching_pattern "$1" "$2" "*"
  do_symlink_folder_folders_matching_pattern "$1" "$2" ".*"
}

do_backup_and_symlink_file() {
  SRC_FILE=$1
  DEST_FILE=$2

  # Backup file if it exists
  do_backup_file "$DEST_FILE"

  # Symlink file
  do_symlink_file "$SRC_FILE" "$DEST_FILE"
}

do_backup_and_symlink_folder_files_matching_pattern() {
  SRC_FOLDER=$1
  DEST_FOLDER=$2
  PATTERN=$3

  # Backup and symlink files in folder
  for file in "$SRC_FOLDER"/$PATTERN; do
    FILE_NAME=$(basename "$file")
    DEST_FILE="$DEST_FOLDER/$FILE_NAME"
    do_backup_and_symlink_file "$file" "$DEST_FILE"
  done
}

do_backup_and_symlink_folder_files() {
  do_backup_and_symlink_folder_files_matching_pattern "$1" "$2" "*"
}

do_add_bashrc_import_groups() {
  # Accept a list of group names as arguments
  GROUP_NAMES=("$@")
  GROUP_FILE="$OPEN_FOLDER/.bashrc.group_imports"

  # Delete the file if it exists
  if [ -f "$GROUP_FILE" ]; then
    echo "Removing existing $GROUP_FILE"
    rm "$GROUP_FILE"
  fi

  # Create the group file
  echo "# Import other profiles" > "$GROUP_FILE"
  echo "# This file is automatically generated, do not edit or commit directly." >> "$GROUP_FILE"
  echo "export BASHRC_GROUPS=\"${GROUP_NAMES[*]}\"" >> "$GROUP_FILE"
}