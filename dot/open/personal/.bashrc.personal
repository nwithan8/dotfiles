###### Imports

eval export $(cat "$HOME/.dotfiles_secrets") || true # Load secrets from .dotfiles_secrets file




###### Constants

# Use nano as default editor
export EDITOR=nano


####### Set up folders and files

eval "$(mkdir -p ~/.Trash)" # This folder already exists on MacOS




####### Load modules and plugins

# Load bash completion scripts
for script in /etc/bash_completion.d/*; do
    [[ -r "$script" ]] && . "$script";
done;

# Load scripts
export DOTSCRIPTS="$HOME/.scripts"

# Load pyenv
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# Load rbenv: https://github.com/rbenv/rbenv#installation
export PATH="$HOME/.rbenv/bin:$PATH"
if [ `command -v rbenv` ]
then
    eval "$(rbenv init -)"
fi

# Load nvm
export NVM_DIR="$HOME/.nvm"
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && \. "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# Load go
export GOPATH=$(go env GOPATH)
export PATH=$PATH:$GOPATH/bin

# Load cargo
export PATH="$HOME/.cargo/bin:$PATH"

# Load zoxide
eval "$(zoxide init bash)"

####### Aliases

# More advanced cat
alias cat="bat"
alias cleancat="/bin/cat"

# Trash on Unix
alias rm="trash" # Send args to "trash" function below

# Use pyenv pip
alias pip="python3 -m pip"
alias pip3="python3 -m pip"

# GitHub CLI shortcuts
alias ghpr="gh pr"

# BitWarden SSH key importer
alias bwssh="$DOTSCRIPTS/bw_add_sshk"

# Replace cd with z
alias cd=z
alias cdi=zi

####### Shortcuts (call directly)

# Refresh pyenv versions
function pyenv_refresh() {
    PYENV_ROOT="$HOME/.pyenv"
    cd "$PYENV_ROOT" && git pull
    cd "$HOME"
}

# Install latest version of Python
function pyenv_install_latest() {
    eval "$(pyenv init -)"

    # Install latest version of Python that is not a development version
    LATEST_VERSION=$(pyenv install --list | grep -E "^[0-9]+\.[0-9]+\.[0-9]+$" | tail -n 1)
    LATEST_VERSION=$(echo "$LATEST_VERSION" | tr -d '[:space:]')
    # echo "Installing latest version of Python: $LATEST_VERSION"

    INSTALL_COMMAND="pyenv install -s $LATEST_VERSION"
    echo "$INSTALL_COMMAND"
    # eval "$INSTALL_COMMAND"
}

# Install latest patch of Python minor version
function pyenv_install_latest_patch() {
    eval "$(pyenv init -)"

    minor_version="$1"
    if [ -z "$minor_version" ]; then
        echo "Usage: pyenv_install_latest_patch <minor_version>"
        return 1
    fi

    LATEST_PATCH=$(pyenv install --list | grep -E "^  $minor_version\.[0-9]+$" | tail -n 1)

    # echo "Installing latest patch of Python $minor_version: $LATEST_PATCH"
    INSTALL_COMMAND="pyenv install -s $LATEST_PATCH"
    echo "$INSTALL_COMMAND"
    # eval "$INSTALL_COMMAND"

    MATCHING_MINOR_VERSIONS=$(_pyenv_find_versions "$minor_version")
    for version in $MATCHING_MINOR_VERSIONS; do
        if [ "$version" != "$LATEST_PATCH" ]; then
            # echo "Uninstalling old version: $version"
            UNINSTALL_COMMAND="pyenv uninstall -f $version"
            echo "$UNINSTALL_COMMAND"
            # eval "$UNINSTALL_COMMAND"
        fi
    done
}

# Trash on Unix
function trash() {
  for file in "$@"; do
    mv "$file" ~/.Trash/
  done
}

# Get most-used commands
most_used_commands() {
    # Count from first argument, or 10 if no argument
    count=${1:-10}
    history | awk '{print $4}' | sort | uniq -c | sort -nr | head -n "$count"
}

# Paste file contents to Hastebin
haste() {
    a=$(cat $1);
    p=$(curl -X POST -s -d "$a" $HASTEBIN_URL/documents | awk -F '"' '{print $4}');
    echo "$HASTEBIN_URL/$p";
}

# Copy a local file to the pcopy server
pcp() {
    pcopy copy "$1" < "$1"
}

# Copy a local directory to the pcopy server
pcpdir() {
    pcopy copy $(basename "$1") "$1"
}

# Paste a file from the pcopy server to a local file
ppaste() {
    pcopy paste "$1" > "$1"
}

# Paste a directory from the pcopy server to a local directory
ppastedir() {
    pcopy paste "$1" > "$1.zip"
}

# Install rbenv easily
function rbenv_install_easy() {
    RUBY_CONFIGURE_OPTS=--with-readline-dir="$(brew --prefix readline)" RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/Cellar/openssl@3/3.0.1 rbenv install -v $1
}

# Read file contents
function read_file() {
    file="$1"
	cat "$file"
}

# Convert directory to zip
function zip_dir() {
    dir="$1"
	cd "$dir" && zip -r -q - .
}

# Encrypt a file
function encrypt_file() {
    file="$1"
	read_file "$file" | gpg -ac -o-
}

# Encrypt a directory
function encrypt_dir() {
    dir="$1"
	(zip_dir "$dir") | gpg -ac -o-
}

# Decrypt a file
function decrypt_file() {
    file="$1"
    gpg -o- $file > "$file"
}

# Upload a file to a URL
function upload_file() {
    file="$1";
    url="$2";
    curl -X PUT --progress-bar --upload-file "$file" "$url/$file"
}

# Download a file from a URL
function download_file() {
    url="$1"
    curl "$url"
}

# Checkout an external GitHub PR (requires GH CLI)
function ghpr_checkout() {
    id="$1"
    if [ -z "$id" ]; then
        echo "Usage: ghpr_checkout <id> <repo>"
        return 1
    fi

    # Fetch PR
    gh pr checkout "$id"
    git checkout "$pr_id"
}

# Checkout an external GitHub PR
function ghpr_checkout_old() {
    id="$1"
    if [ -z "$id" ]; then
        echo "Usage: ghpr_checkout <id> <repo>"
        return 1
    fi

    repo="$2"
    if [ -z "$repo" ]; then
        echo "Usage: ghpr_checkout <id> <repo>"
        return 1
    fi

    pr_id="pr-$id"

    # Set up new remote
    git remote add "$pr_id" "$repo"

    # Fetch PR
    git fetch origin pull/$id/head:$pr_id
    git checkout "$pr_id"
}

# Create a Python virtual environment
function make_py_venv() {
    venv_path="$1"
    if [ -z "$venv_path" ]; then
        echo "Usage: make_py_venv <venv_path>"
        return 1
    fi

    python3 -m venv "$venv_path"
    source "$venv_path/bin/activate"
}

# Ask GitHub Copilot for help
function ask_copilot() {
    prompt="$1"
    input="$(cat)"

    if [ -z "$prompt" ]; then
        echo "Usage: cat some_file.txt | ask_copilot '<prompt>'"
        return 1
    fi

    gh copilot explain "$prompt:\n$input"
}

# Install standard GitHub Copilot aliases
eval "$(gh copilot alias -- bash)"

####### Internal functions (call indirectly)

# Find all versions of Python in pyenv with matching major.minor version
function _pyenv_find_versions() {
    version="$1"
    if [ -z "$version" ]; then
        echo "Usage: _pyenv_find_versions <version>"
        return 1
    fi

    pyenv versions --bare | grep -E "^$version\.[0-9]+$"
}

# Upload encrypted file to transfer.sh instance
function _upload_encrypted_file() {
    file="$1";
    url="$2";
	curl -X PUT --upload-file "-" "$url/$file"
}

# Transfer a file or directory to a transfer.sh instance
function _transfer(){
	if [ $# -eq 0 ]; then
		echo "No arguments specified. Usage: _transfer <file|directory> <url>">&2;
		return 1;
	fi;
	url="$2";
	if tty -s; then
		file="$1";
		file_name=$(basename "$file");
		if [ ! -e "$file" ]; then
			echo "$file: No such file or directory">&2;
			return 1;
		fi;
		if [ -d "$file" ]; then
			file_name="$file_name.zip";
			(zip_dir "$file") | upload_file "$file_name" "$url" | tee /dev/null;
		else
			read_file "$file" | upload_file "$file_name" "$url" | tee /dev/null;
		fi;
	else
		file_name=$1;
		upload_file "$file_name" "$url" | tee /dev/null;
	fi;
}

# Encrypt and transfer a file or directory to a transfer.sh instance
function _encrypt_transfer() {
	if [ $# -eq 0 ]; then
                echo "No arguments specified. Usage: _encrpyt_transfer <file|directory>">&2;
                return 1;
        fi;
        url="$2";
        if tty -s; then
                file="$1";
                file_name=$(basename "$file");
                if [ ! -e "$file" ]; then
                        echo "$file: No such file or directory">&2;
                        return 1;
                fi;
                if [ -d "$file" ]; then
                        file_name="$file_name.zip" ,;
                        (encrypt_dir "$file") | _upload_encrypted_file "$file_name" "$url" | tee /dev/null;
                else
                        encrypt_file "$file" | _upload_encrypted_file "$file_name" "$url" | tee /dev/null;
                fi;
        else
                file_name=$1;
                encrypt_file "$file_name" | upload_file "$file_name" "$url" | tee /dev/null;
        fi;
}

# Download a file from a transfer.sh instance
function _download_transfer() {
    url="$1"
    download_file "$1"
}

# Download and decrypt a file or directory from a transfer.sh instance
function _download_encrypted_transfer() {
	url="$1";
	file_name=$(basename "$url");
	curl "$url" | gpg -o- > "$file_name"
}




####### Load platform-specific user bash files

# Linux
[[ $KERNEL == 'Linux' ]] && [[ -s "$HOME/.bashrc.personal.linux" ]] && source "$HOME/.bashrc.personal.linux"
# Mac
[[ $KERNEL == 'Darwin' ]] && [[ -s "$HOME/.bashrc.personal.mac" ]] && source "$HOME/.bashrc.personal.mac"




####### Imports other bash files

export BASHRC_GROUPS='easypost epnharris'  # BashFTW will load a .bashrc.X file for each group
