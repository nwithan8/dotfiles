#!/bin/bash

##################################################
# start up
eval "$(/opt/homebrew/bin/brew shellenv)"  # Load brew

# aliases

# basic commands
# `ls` has different flags on Mac
alias l='ls -CFG'
alias la='ls -aFG'
alias ll='ls -lhFG'
alias lla='ls -lahFG'
alias llt='ls -lhtFG'
alias llat='ls -lahtFG'
# `top` has different flags on Mac
alias topcpu='top -o CPU'
alias topmem='top -o MEM'

# command-line utils
if [[ -z `which 7z` ]];
then
    alias 7z='/Applications/7za'
fi
alias editapache='sudo emacs /private/etc/apache2/users/`whoami`.conf'
if [[ -z `which emacs` ]];
then
    if [[ -f /Applications/Emacs.app/Contents/MacOS/Emacs ]]
    then
        alias emacs='/Applications/Emacs.app/Contents/MacOS/Emacs -nw'
    else
        echo 'Graphical Emacs is not installed'
    fi
fi
alias flushdns='sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder'
alias hidden_files_show='defaults write com.apple.finder AppleShowAllFiles TRUE;killall Finder'
alias hidden_files_hide='defaults write com.apple.finder AppleShowAllFiles FALSE;killall Finder'
alias kill-screensaver='killall ScreenSaverEngine'
alias restart-firefox='killall firefox-bin;echo "Waiting for firefox-bin to die";sleep 3;echo "Restarting Firefox";firefox'
alias restartapache='sudo apachectl graceful'
alias restartcardreader='sudo kextunload -b com.apple.driver.AppleUSBCardReader; sudo kextload -b com.apple.driver.AppleUSBCardReader'
alias restartcoreaudio='sudo killall -9 -u _coreaudiod'
alias restartusbstorages='sudo kextunload -b com.apple.driver.AppleUSBCardReader;sudo kextunload -b com.apple.driver.AppleSDXC;sudo kextunload -b com.apple.iokit.IOUSBMassStorageClass;sudo kextload -b com.apple.driver.AppleUSBCardReader;sudo kextload -b com.apple.driver.AppleSDXC;sudo kextload -b com.apple.iokit.IOUSBMassStorageClass;'
alias setlocalhostname='sudo scutil --set HostName'
alias set-utc-timezone='sudo ln -sf /usr/share/zoneinfo/UTC /etc/localtime'
alias tailerr='tail -f /var/log/apache2/error_log'
alias taillog='tail -f /var/log/apache2/access_log'
alias updatedb='sudo /usr/libexec/locate.updatedb'

##################################################
# directories

alias desktop='cd ~/Desktop'
alias docs='cd ~/Documents'
alias music='cd ~/Music'
alias pics='cd ~/Pictures'
alias progs='cd ~/progs'

##################################################
# Command-line launchers for Apple Applications

# lock screen - set "Require password [immediately] after sleep or screen saver begins"
#/System/Library/CoreServices/"Menu Extras"/User.menu/Contents/Resources/CGSession -suspend
#SCREENSAVER='/System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app'
SCREENSAVER='ScreenSaverEngine'
alias lll='open -a $SCREENSAVER'

##
# dev
alias txt='open -a TextEdit'
alias xcode='open -a Xcode'

##
# media
alias imovie='open -a iMovie'
alias itunes='open -a iTunes'
alias photobooth='open -a Photo\ Booth'

##
# net
alias facetime='open -a FaceTime'
alias safari='open -a Safari'
# Tailscale VPN - https://tailscale.com/kb/1080/cli?tab=macos
alias tailscale="/Applications/Tailscale.app/Contents/MacOS/Tailscale"

##
# util
alias keychain='open -a /Applications/Utilities/Keychain\ Access.app'
alias prefs='open -a System\ Preferences'

##################################################
# Command-line launchers for other common Mac Applications

# dev
alias eclipse='open -a eclipse'

# common
alias doc='open -a Microsoft\ Word'
alias ppt='open -a Microsoft\ PowerPoint'
alias xls='open -a Microsoft\ Excel'

# media
alias audacity='open -a Audacity'
alias vlc='open -a VLC'

# net
alias adium='open -a Adium'
alias chrome='open -a Google\ Chrome'
alias firefox='open -a Firefox'
alias skype='open -a Skype'
alias thunderbird='open -a Thunderbird'
alias ymsg='open -a Yahoo!\ Messenger'

# util
alias qs='open -a Quicksilver'

##################################################
# Installation Cheatsheets

alias install-xcode-cli-tools='xcode-select --install'

alias install-homebrew='/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"'

##################################################
# LaunchCtl

function restart-launchctl-process {
    process=$1
    launchctl stop $process
    sleep 3
    launchctl start $process
}

##################################################
# Mac Configuration

# https://support.apple.com/en-us/HT208050
export BASH_SILENCE_DEPRECATION_WARNING=1

export APPLE_SSH_ADD_BEHAVIOR=macos

##################################################
# export PATH overrides

if [ -d /usr/local/mysql/bin ]
then
    PATH=$PATH:/usr/local/mysql/bin
    export PATH
fi

# MacOS bison is 2.3, prefer Homebrew's
if [ -d /usr/local/opt/bison/bin ]
then
    PATH=/usr/local/opt/bison/bin:$PATH
    export PATH
fi

# MacOS flex is 2.5, prefer Homebrew's
if [ -d /usr/local/opt/flex/bin ]
then
    PATH=/usr/local/opt/flex/bin:$PATH
    export PATH
fi

##################################################
# Build Dependencies


export LDFLAGS="-L/opt/homebrew/opt/bison/lib -L/opt/homebrew/opt/flex/lib"
export CPPFLAGS="-I/opt/homebrew/opt/bison/include -I/opt/homebrew/opt/flex/include"
export PATH="/opt/homebrew/opt/bison/bin:/opt/homebrew/opt/flex/bin:$PATH"


##################################################
# Java / OpenJDK

export PATH="/usr/local/opt/openjdk/bin:$PATH"

##################################################
# Useful Helper Functions

#
# MySQL

function copy-mysql-pw {
    # cat ~/.my.cnf | grep password | cut -d = -f 2 | awk '{ printf "%s", $1 }' | pbcopy
    # grep password ~/.my.cnf | cut -d = -f 2 | awk '{ printf "%s", $1 }' | pbcopy
    awk -F '=' '/^password/ { printf "%s", $2 }' ~/.my.cnf | pbcopy
}

#
# Node.js
#

function n {
    $(npm bin)/$@
}

#
# NTFS mounts
# https://github.com/osxfuse/osxfuse/wiki/NTFS-3G
#

function mount-ntfs-rw {
    if [[ $# == 2 ]]
    then
        DEVICE=$1
        VOLUME=$2
        sudo mkdir $VOLUME
        sudo ntfs-3g $DEVICE $VOLUME -olocal -oallow_other
    else
        echo "Usage: mount-ntfs-rw /dev/DEVICE /Volumes/VOLUME"
    fi
}


#
# Networking
#

function set-hostname {
    # Source: https://apple.stackexchange.com/a/287775/132120

    if [[ $# == 1 ]]
    then
        HOSTNAME=$1

        # Set primary hostname
        sudo scutil --set HostName ${HOSTNAME}

        # Set Bonjour hostname
        sudo scutil --set LocalHostName ${HOSTNAME}

        # Set Computer name
        sudo scutil --set ComputerName ${HOSTNAME}

        # Flush DNS cache
        dscacheutil -flushcache
    else
        echo "Usage: set-hostname <HOSTNAME>"
    fi
}
